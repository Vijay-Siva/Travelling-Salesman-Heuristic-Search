from tsp import *
from heuristics import * 
from search import * 

#TSP test cases 
V = [3, 4, 11, 10, 5, 17, 7, 15, 8, 18, 22, 2, 25, 12, 21, 24, 19, 30, 26, 14, 6, 13, 1, 27, 23, 20, 28, 9, 29, 16]

E = [(3, 4, 1), (4, 11, 1), (11, 10, 1), (10, 5, 1), (5, 17, 1), (17, 7, 1), (7, 15, 1), (15, 8, 1), (8, 18, 1), (18, 22, 1), (22, 2, 1), (2, 25, 1), (25, 12, 1), (12, 21, 1),
 (21, 24, 1), (24, 19, 1), (19, 30, 1), (30, 26, 1), (26, 14, 1), (14, 6, 1), (6, 13, 1), (13, 1, 1), (1, 27, 1), (27, 23, 1), (23, 20, 1), (20, 28, 1), (28, 9, 1), (9, 29
, 1), (29, 16, 1), (16, 3, 1)]

Tests = [TSPState("Start", 0, None, [], [1, 2, 3, 4], [], 
            [(1, 2, 1), (2, 3, 1), (3, 4, 1), (4, 1, 1), (2, 4, 5), (1, 3, 7)], 4),
            TSPState("Start", 0, None, [], [1, 2, 3, 4], [], 
            [(1, 2, 10), (1, 3, 15), (1, 4, 20), (2, 1, 10), (2, 3, 35), (2, 4, 25),
                (3, 1, 15), (3, 2, 35), (3, 4, 30), (4, 1, 20), (4, 2, 25), 
                    (4, 3, 30)], 70), 
        TSPState("Start", 0, None, [], V, [], E, 30)]


if __name__ == "__main__":
    se = SearchEngine('best_first', 'none')
    for test_case in Tests:
        final = se.search(initState=test_case, heur_fn=rand, goal_fn=goal_state)
